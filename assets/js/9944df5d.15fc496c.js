"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["4615"],{2193:function(e,i,n){n.r(i),n.d(i,{default:()=>u,frontMatter:()=>s,metadata:()=>t,assets:()=>o,toc:()=>d,contentTitle:()=>l});var t=JSON.parse('{"id":"user_guide/fitting/parameter_files","title":"Parameter Files","description":"Overview","source":"@site/docs/user_guide/fitting/parameter_files.md","sourceDirName":"user_guide/fitting","slug":"/user_guide/fitting/parameter_files","permalink":"/ChemEx/docs/user_guide/fitting/parameter_files","draft":false,"unlisted":false,"editUrl":"https://github.com/gbouvignies/chemex/tree/main/website/docs/user_guide/fitting/parameter_files.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Data Files","permalink":"/ChemEx/docs/user_guide/fitting/data_files"},"next":{"title":"Method Files","permalink":"/ChemEx/docs/user_guide/fitting/method_files"}}'),r=n("5893"),a=n("65");let s={sidebar_position:5},l="Parameter Files",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Example Parameter File",id:"example-parameter-file",level:2},{value:"Setting Parameter Bounds",id:"setting-parameter-bounds",level:2}];function c(e){let i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"parameter-files",children:"Parameter Files"})}),"\n",(0,r.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(i.p,{children:["Parameter files contain initial estimates for the parameters used in the fitting process. These files are specified in ChemEx using the ",(0,r.jsx)(i.code,{children:"-p"})," or ",(0,r.jsx)(i.code,{children:"--parameters"})," option:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-shell",children:"chemex fit [...] -p <parameter_file> [...]\n"})}),"\n",(0,r.jsx)(i.p,{children:"Parameter files are organized into sections:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["The ",(0,r.jsx)(i.code,{children:"[GLOBAL]"})," section applies parameters universally to all residues."]}),"\n",(0,r.jsxs)(i.li,{children:["Residue-specific parameters are defined in sections named after each parameter, such as ",(0,r.jsx)(i.code,{children:"[CS_A]"}),". Multiple parameter files can be provided if needed."]}),"\n"]}),"\n",(0,r.jsx)(i.admonition,{type:"warning",children:(0,r.jsxs)(i.p,{children:["To ensure accurate results and avoid local minima, set appropriate initial values for each parameter, as the \u03C7",(0,r.jsx)("sup",{children:"2"})," minimization process involves multidimensional searching."]})}),"\n",(0,r.jsx)(i.admonition,{type:"info",children:(0,r.jsx)(i.p,{children:"If no initial value is provided in the parameter files, a default value will be assigned."})}),"\n",(0,r.jsx)(i.h2,{id:"example-parameter-file",children:"Example Parameter File"}),"\n",(0,r.jsx)(i.p,{children:"Below is an example of a parameter file:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-toml",metastring:'title="parameters.toml"',children:"[GLOBAL]\nPB     = 0.015\nKEX_AB = 70.0\nTAUC_A = 10.0\n\n[CS_A]\n13N = 108.207\n26N = 115.711\n28N = 113.882\n29N = 115.318\n33N = 115.636\n37N = 116.159\n41N = 114.635\n42N = 113.525\n43N = 108.876\n50N = 107.855\n52N = 111.358\n55N = 128.301\n59N = 116.388\n66N = 119.429\n67N = 114.454\n68N = 120.595\n\n[DW_AB]\n13N = 4.0\n26N = 5.5\n28N = 6.5\n29N = 6.0\n33N = 4.5\n37N = 5.0\n41N = 6.0\n42N = 6.0\n43N = 12.5\n50N = 8.0\n52N = 8.5\n55N = -6.5\n59N = 6.5\n66N = 4.0\n67N = 8.0\n68N = 4.5\n"})}),"\n",(0,r.jsx)(i.admonition,{type:"tip",children:(0,r.jsxs)(i.p,{children:["Setting model-free parameters (e.g., ",(0,r.jsx)(i.code,{children:"TAUC_A"}),") can provide a good initial estimate for relaxation parameters (e.g., ",(0,r.jsx)(i.code,{children:"R1_A"}),", ",(0,r.jsx)(i.code,{children:"R2_A"}),"). For biomolecules in H",(0,r.jsx)("sub",{children:"2"}),"O at T = 300 K, the overall tumbling time is roughly 1 ns per 2.6 kDa of molecular weight. Tumbling time is proportional to \u03B7/T, where \u03B7 is solution viscosity and T is temperature in Kelvin."]})}),"\n",(0,r.jsx)(i.h2,{id:"setting-parameter-bounds",children:"Setting Parameter Bounds"}),"\n",(0,r.jsx)(i.p,{children:"To set upper and lower bounds for any fitting parameter, replace the initial value with a list of three elements:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-toml",metastring:'title="parameters.toml"',children:"PARAMETER_WITH_NO_BOUNDS = <initial_value>\nPARAMETER_WITH_BOUNDS = [<initial_value>, <lower_bound>, <upper_bound>]\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Setting bounds helps prevent parameters from reaching unrealistic values during \u03C7",(0,r.jsx)("sup",{children:"2"})," minimization. However, avoid overly strict bounds as they can hinder convergence. Some minimization algorithms, such as ",(0,r.jsx)(i.code,{children:"differential_evolution"}),", require finite bounds for all fitted parameters."]})]})}function u(e={}){let{wrapper:i}={...(0,a.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},65:function(e,i,n){n.d(i,{Z:function(){return l},a:function(){return s}});var t=n(7294);let r={},a=t.createContext(r);function s(e){let i=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);