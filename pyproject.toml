[build-system]
  requires      = [ "pdm-backend" ]
  build-backend = "pdm.backend"

[project]
  name = "chemex"
  description = "An analysis program for chemical exchange detected by NMR"
  authors = [ { name = "Guillaume Bouvignies", email = "guillaume.bouvignies@ens.psl.eu" } ]
  dependencies = [
    "numpy>=1.25.0",
    "scipy>=1.9.3",
    "matplotlib>=3.7.1",
    "lmfit>=1.2.1",
    "pydantic>=2.0.1",
    "cachetools>=5.3.1",
    "rich>=13.4.2",
    "tomli>=2.0.1",
    "rapidfuzz>=3.1.1",
  ]
  requires-python = ">=3.10"
  readme = "README.md"
  license = { text = "GPL-3.0-or-later" }
  dynamic = [ "version" ]

  [project.urls]
    Homepage      = "http://gbouvignies.github.io/ChemEx/"
    Documentation = "http://gbouvignies.github.io/ChemEx/"
    Repository    = "https://github.com/gbouvignies/chemex"
    Changelog     = "https://github.com/gbouvignies/chemex/releases"

  [project.scripts]
    chemex = "chemex.chemex:main"

[tool.pdm.version]
  source = "scm"

[tool.pdm.dev-dependencies]
  linting = [ "black>=23.3.0", "ruff>=0.0.277" ]

[tool.black]
  target-version = [ "py310" ]

[tool.ruff]
  select = [
    "E",
    "F",
    "W",   # flake8
    "B",   # flake8-bugbear
    "I",   # isort
    "ARG", # flake8-unused-arguments
    "C4",  # flake8-comprehensions
    "EM",  # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    # "TCH", # flake8-type-checking
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD",  # pandas-vet
  ]
  ignore = [ "PLR0913", "PD011", "RUF012", "PGH001" ] # Temporary ignore
  target-version = "py310"

  [tool.ruff.isort]
    known-first-party = [ "chemex" ]

  [tool.ruff.flake8-type-checking]
    runtime-evaluated-base-classes = [ "pydantic.BaseModel", "pydantic.RootModel" ]

  [tool.ruff.pep8-naming]
    classmethod-decorators = [ "pydantic.field_validator", "pydantic.model_validator" ]
